<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Home</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css" integrity="sha384-9gVQ4dYFwwWSjIDZnLEWnxCjeSWFphJiwGPXr1jddIhOegiu1FwO5qRGvFXOdJZ4"
        crossorigin="anonymous">
            
    <link rel="stylesheet" href="style.css">
    <link rel="stylesheet" href="reset.css">

</head>

<body>

    <div class="container">
        <div class="card">
        <header class="header row">
            <div class="col-4">
                <div class="profile p-2">
                    <p id="yop">Welcome</p>
                    <p>Account:<span id="balance"></span></p>
                </div>
            </div>
            <div class="col-4">
                <h1 class="p-2">MEETUPS</h1>
            </div>

            <
            <div class="col-4 p-2">
                <a href="http://localhost:8045/meeting">
                <button class="btn btn-primary float-right" id="newMeetUp" name="newMeetup" value="newMeetup">CREATE NEW</button>
                </a>
            </div>
            <div id="notif">notif</div>
        </header>
            <% for(let i = 0; i < newResult.length; i++) { %>
               
        <div class="card shadow p-3 mb-5 bg-white rounded">
            <h2 class="meetupName card-title p-1"><%= newResult[i].name %></h2>
            <div class="card-body d-flex justify-content-between">
                <div class="leftDiv">
                    <p>Hour:
                        <span class="meetingHour"><%= newResult[i].meetTime %></span>
                    </p>
                    <p>Stake:
                        <span class="meetingStake"><%= newResult[i].stake %></span>
                    </p>
                    <p>Participants:
                        <span class="meetingStake"><%= newResult[i].participants %></span>
                    </p>
                </div>




             </div>
                 <div class="status">
                </div>
            </div>
         <% } %>

        </div>
        </div>
     
        <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"
            crossorigin="anonymous"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js" integrity="sha384-cs/chFZiN24E4KMATLdqdvsezGxaGsi4hLGOzlXwp5UZB1LY//20VyM2taTB4QvJ"
            crossorigin="anonymous"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js" integrity="sha384-uefMccjFJAIv6A+rW+L4AHf99KvxDjWSu1z9VI8SKNVmz4sk7buKt/6v9KI65qnm"
            crossorigin="anonymous"></script>
                    <script>
            var socket = io.connect('http://localhost:8045');
                        // On demande le pseudo au visiteur...
            var pseudo = prompt('Quel est votre pseudo ?');
            // Et on l'envoie avec le signal "petit_nouveau" (pour le différencier de "message")
            socket.emit('petit_nouveau', pseudo);

            // On affiche une boîte de dialogue quand le serveur nous envoie un "message"
            socket.on('message', function(message) {
             // var message = "vous avez été à être in Time à "+message;
                alert('Le serveur a un message pour vous : ' + message);//nouveau meeting 
            })

            // Lorsqu'on clique sur le bouton, on envoie un "message" au serveur
            $('#notif').click(function () {
                socket.emit('message', 'Salut serveur, ça va ?');//réinitialiser la variable d'environnement soket.io
            })
        </script>
<script>
if(typeof web3 != 'undefined'){
      console.log("Using web3 detected from external source like Metamask")
            web3 = new Web3(web3.currentProvider);

   }else{
         web3 = new Web3(new portis.PortisProvider({ network: 'ropsten' }))
         console.log(web3.currentProvider.isPortis);
   }
this.web3.version.getNetwork((err, netId) => {
  switch (netId) {
    case "1":
      console.log('This is mainnet')
      break
    case "2":
      console.log('This is the deprecated Morden test network.')
      break
    case "3":
      console.log('This is the ropsten test network.')
      break
    case "4":
      console.log('This is the Rinkeby test network.')
      break
    case "42":
      console.log('This is the Kovan test network.')
      break
    default:
      console.log('This is an unknown network.')
  }
})
var account = this.web3.eth.accounts[0];
var accountInterval = setInterval(function() {
  if (this.web3.eth.accounts[0] !== account) {
    account = this.web3.eth.accounts[0];
    //updateInterface();
  }
}, 100);

// here goes a bit of code that you copy from your remix compiler like benetth wuth the uge string of hexadecimal
var intimeContract = web3.eth.contract([
  {
    "constant": false,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_amount",
        "type": "uint256"
      }
    ],
    "name": "ethWithdraw",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_stake",
        "type": "uint256"
      }
    ],
    "name": "participate",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_addr",
        "type": "address"
      }
    ],
    "name": "getBalanceByAddress",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "newOwner",
        "type": "address"
      }
    ],
    "name": "setOwner",
    "outputs": [
      {
        "name": "success",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "newState",
        "type": "bool"
      }
    ],
    "name": "setPaused",
    "outputs": [
      {
        "name": "success",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "getBalance",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "getMeetingTime",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "getMeetingStake",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [],
    "name": "refund",
    "outputs": [],
    "payable": true,
    "stateMutability": "payable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "totalMeetingStake",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_addr",
        "type": "address"
      }
    ],
    "name": "getId",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_addr",
        "type": "address"
      }
    ],
    "name": "late",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "getMeetingName",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_stake",
        "type": "uint256"
      }
    ],
    "name": "enrichiBalance",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "getOwner",
    "outputs": [
      {
        "name": "owner",
        "type": "address"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_name",
        "type": "string"
      },
      {
        "name": "_time",
        "type": "string"
      },
      {
        "name": "_stake",
        "type": "uint256"
      },
      {
        "name": "_firstPlayer",
        "type": "address"
      }
    ],
    "name": "setMeeting",
    "outputs": [
      {
        "name": "res",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "pausedState",
    "outputs": [
      {
        "name": "",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "isPaused",
    "outputs": [
      {
        "name": "isIndeed",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "redistribution",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "getAddress",
    "outputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "compare",
    "outputs": [
      {
        "name": "",
        "type": "address[]"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "participantsIn",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_stake",
        "type": "uint256"
      }
    ],
    "name": "diminueBalance",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "constructor"
  },
  {
    "payable": true,
    "stateMutability": "payable",
    "type": "fallback"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "sender",
        "type": "address"
      },
      {
        "indexed": true,
        "name": "newPausedState",
        "type": "bool"
      }
    ],
    "name": "LogPausedSet",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "previousOwner",
        "type": "address"
      },
      {
        "indexed": true,
        "name": "newOwner",
        "type": "address"
      }
    ],
    "name": "LogOwnerSet",
    "type": "event"
  }
]);

    // the address of the contract you are interracting with
var inContract = intimeContract.at('0xA41921d2FcC11f0352c188bf954ee19BA9cEc173');

console.log(<%-newResult.smartId %>);

inContract.getBalanceByAddress(<%-newResult.smartId %>,function(error, result){
      
      if(!error){

        console.log(JSON.stringify(result));
        $('#balance').text(JSON.stringify(result));

      }else{
          console.error(error);
      }
});
     

$("#yop").click(function(){

        inContract.getId(<%-newResult.smartId %> ,function(error, res){
      

        if(!error)
        {

          console.log(JSON.stringify(res));
          $('#yop').text(JSON.stringify(res));
        }else{

          console.error(error);
        }
        }); 
  });

</script>


</body>
</html>